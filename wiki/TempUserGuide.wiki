#summary User Guide for YAJCo tool.

<wiki:toc max_depth="3" />

= User Guide =

_TEMPORARY USER GUIDE_

_WORK IN PROGRESS_

==Main annotations==

===`@Before` and `@After`===
Parameter:
  * `String[] value();`
    * set of actual strings or names of defined tokens
    * main parameter => does not need to be named in code

Describes placement of language tokens in concrete syntax of language. Can be used as annotation on _constructor_, _factory method_ and _parameters_ in constructors and factory methods. Specified tokens in `value` parameter can be:
  * actual textual representation of required tokens
  * names of regex tokens defined with `@TokenDef` inside `@Parser` configuration

{{{
Java:                          |  EBNF:
                               |
@Before("move")                |  Move ::= <move>
Move() {}                      |                       
}}}

{{{
Java:                          |  EBNF:
@Before("iterate")             |  
@After("end")                  |  Iteration ::= <iterate> Expression <times> Statement <end>
Iteration(Expression expr,     |
    @Before("times")           |
    Statement statement) {...} |
}}}
===`@Separator`===
Parameter:
  * `String value();`
    * one string or name of defined tokens to be used as separator in list of elements
    * main parameter => does not need to be named in code

In case you need to specify token for separation of elements used in array or list, this is the annotation you would need.

Use only on parameters of types:
    * array - `Type[]`
    * `List`
    * `Set`

{{{
Java:                          |  EBNF:
@Before("define")              |  
Definition(String ident,       |  Definition ::= <define> IDENT <as> Statement (<;> Statement)*
    @Before("as")              |
    @Range(minOccurs = 1)      |
    @Separator(";")            |
    Statement[] stmts) {...}   |
}}}

===`@Token`===
text
===`@Identifier`===
text
===`@References`===
text

===`@Range`===
text
===`@Operator`===
text
===`@Exclude`===
text
===`@FactoryMethod`===
text
===`@Parentheses`===
text

==Config annotations==
text
===`@Parser`===
text
===`@TokenDef`===
text
===`@Skip`===
text
===`@Option`===
text

==Printer annotations==
text
===`@NewLine`===
text
===`@Indent`===
text

==Restrictions==

  * Language concept class must be inside a package. Default package classes are not permitted.
{{{
OK:
  yajco.example.Concept

NOT OK:
  ConceptWithoutPackage
}}}
  * Each language concept class must be in the same package as main (root) language concept or in subpackages. It is not possible to have classes representing language concepts in completely different packages.
{{{
OK:
  yajco.example.MainConcept
  yajco.example.SecondaryConcept
  yajco.example.subpackage.SpecialConcept
  yajco.example.subpackage.subsub.VerySpecialConcept

NOT OK:
  yajco.example.MainConcept
  yajco.special.DifferentConcept
  com.google.SearchConcept
}}}

==IDE how-to==
Using Maven project with YAJCo in most common IDE can provide a lot faster programming, but there are also some possible problems.

===Netbeans===
text

===IntelliJ IDEA===
text

===Eclipse===
text 