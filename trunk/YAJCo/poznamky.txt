model - model yajco, do ktoreho sa bude generovat

annotation - anotacie pre vytvaranie modelu z Java suborov

parsergen - generovanie parsera z modelu
printergen - generovanie (pretty) printera z modelu
visitorgen - generovanie visitora z modelu

parser - generovany parser pre yajco DSL
printer - generovany (pretty) printer pre yajco DSL

==================================================================================================
Zriadenie cvs, svn

==================================================================================================
Ulohy
. Umoznit zapis mien v [], escape sekvencia pre klucove slova napr. [concept]
. Validacia zostavenenho modelu - Validator, musi oznamovat chyby v kontexte zdroja (podla spatnej vazby)
. Podpora zapisu lexiklanych jednotiek a prazdnych symbolov
. Presun anotacii zo stareho baliku tuke.pargen.annotation do balika yajco.annotation, zvazit pomenovanie balika (yajco napr. na org.yajco, reps. sk.tuke....)
. Komentovanie AnnotationProcessor
. Systematicke generovanie vynimiek - GeneratorException
. Podpora tovarenskych metod prostrednictvom vzoru Factory
. Podpora vzoru Enum
. Podpora pre viacero superconcept
. Podpora spatnej vazby na zdrojovy v Jave, ktory generoval objekt v modeli
. Podpora resp. odstranenie anotacie Optional
. Podpora typov list of; set of (cez vzory)
. Reference resolver - systematicke zahrnutie do riesenia - napr. cez udalosti
. Modifikovanie urcenia lexikalnej jednotky na zaklade stavu syntaktickej analyzy


Semantika ako aspektove riesenie.
Zvazit pretty printer aj ako aspektove riesenie, parser ako aspektove riesenie.

Zmeny v AnnotationProcessor
- processTypeElement upravit z if typeElement.getKind() na switch
- processConcreteClass-Concrete syntax, dodat test nad CONSTRUCTOR a generovat vzor factory (navratova hodnota tovarenskej metody musi byt v sulade z triedou)
- preniest @Operator na triedu z konstruktora a potom odstranit addPatternsFromAnnotations(constructor, concept, ConceptPattern.class);
- test na prenos anotacii na zaklade typu vzoru: ConceptPattern, PropertyPattern, NotationPatern, NotationPartPatern

Podproa anotacie PrettyPrinter
@PrettyPrinter
public void prettyPrint(PrettyPrinter printer) throws IOException {
  Writer writer = printer.getWriter();
  writer.write("if(");
  printer.print(expression);
  writer.write(")\n");
  printer.print(statement);
}

public interface PrettyPrinter {
    void getWriter();
    void print(Object object) IOException;
}
