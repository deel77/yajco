%package "yajco.parser.beaver";
%class "YajcoParser";
%import "yajco.parser.beaver.SymbolListImpl";
%import "yajco.parser.beaver.SymbolWrapper";

%terminals SYMBOLCONCEPT, SYMBOLIDENTIFIER, INTEGER, SYMBOLSEPARATOR, SYMBOLPROPERTY, SYMBOL_58, SYMBOL_46__46, SYMBOLOPERATOR, SYMBOLPRIORITY, SYMBOLCS, SYMBOLNONE, SYMBOL_124, SYMBOL_125, SYMBOLMETHOD, SYMBOLLEFT, SYMBOLLANGUAGE, SYMBOL_123, SYMBOLPARENTHESES, SYMBOLINDENT, SYMBOLTOKENS, SYMBOL_41, SYMBOLAS, REAL, SYMBOL_42, SYMBOLSKIPS, SYMBOLASSOCIATIVITY, SYMBOL_61, SYMBOL_44, NAME, SYMBOLOF, INT_VALUE, BOOLEAN, SYMBOLTOKEN, SYMBOL_40, SYMBOLRIGHT, SYMBOLREFERENCES, SYMBOLAUTO, SYMBOLLIST, SYMBOLENUM, SYMBOLSET, SYMBOLSETTINGS, SYMBOLARRAY, SYMBOLRANGE, STRING_VALUE, SYMBOLNEWLINE, SYMBOLFACTORY, STRING;

%typeof INTEGER = "java.lang.String";
%typeof REAL = "java.lang.String";
%typeof NAME = "java.lang.String";
%typeof INT_VALUE = "java.lang.String";
%typeof BOOLEAN = "java.lang.String";
%typeof STRING_VALUE = "java.lang.String";
%typeof STRING = "java.lang.String";
%typeof References = "yajco.parser.beaver.SymbolWrapper<yajco.model.pattern.impl.References>";
%typeof ConceptPattern = "yajco.parser.beaver.SymbolWrapper<yajco.model.pattern.ConceptPattern>";
%typeof Token = "yajco.parser.beaver.SymbolWrapper<yajco.model.pattern.impl.Token>";
%typeof ConceptPatternArray6 = "yajco.parser.beaver.SymbolWrapper<yajco.parser.beaver.SymbolListImpl<yajco.model.pattern.ConceptPattern>>";
%typeof BindingNotationPart = "yajco.parser.beaver.SymbolWrapper<yajco.model.BindingNotationPart>";
%typeof PrimitiveType = "yajco.parser.beaver.SymbolWrapper<yajco.model.type.PrimitiveType>";
%typeof NotationArray7 = "yajco.parser.beaver.SymbolWrapper<yajco.parser.beaver.SymbolListImpl<yajco.model.Notation>>";
%typeof Parentheses = "yajco.parser.beaver.SymbolWrapper<yajco.model.pattern.impl.Parentheses>";
%typeof Enum = "yajco.parser.beaver.SymbolWrapper<yajco.model.pattern.impl.Enum>";
%typeof Property = "yajco.parser.beaver.SymbolWrapper<yajco.model.Property>";
%typeof ConceptArray3 = "yajco.parser.beaver.SymbolWrapper<yajco.parser.beaver.SymbolListImpl<yajco.model.Concept>>";
%typeof Operator = "yajco.parser.beaver.SymbolWrapper<yajco.model.pattern.impl.Operator>";
%typeof Separator = "yajco.parser.beaver.SymbolWrapper<yajco.model.pattern.impl.Separator>";
%typeof SetType = "yajco.parser.beaver.SymbolWrapper<yajco.model.type.SetType>";
%typeof Factory = "yajco.parser.beaver.SymbolWrapper<yajco.model.pattern.impl.Factory>";
%typeof NotationPartPatternArray11 = "yajco.parser.beaver.SymbolWrapper<yajco.parser.beaver.SymbolListImpl<yajco.model.pattern.NotationPartPattern>>";
%typeof NotationPartArray9 = "yajco.parser.beaver.SymbolWrapper<yajco.parser.beaver.SymbolListImpl<yajco.model.NotationPart>>";
%typeof ReferenceType = "yajco.parser.beaver.SymbolWrapper<yajco.model.type.ReferenceType>";
%typeof NotationPatternArray10 = "yajco.parser.beaver.SymbolWrapper<yajco.parser.beaver.SymbolListImpl<yajco.model.pattern.NotationPattern>>";
%typeof Concept = "yajco.parser.beaver.SymbolWrapper<yajco.model.Concept>";
%typeof LanguageSettingArray4 = "yajco.parser.beaver.SymbolWrapper<yajco.parser.beaver.SymbolListImpl<yajco.model.LanguageSetting>>";
%typeof NotationPart = "yajco.parser.beaver.SymbolWrapper<yajco.model.NotationPart>";
%typeof Identifier = "yajco.parser.beaver.SymbolWrapper<yajco.model.pattern.impl.Identifier>";
%typeof PropertyReferencePart = "yajco.parser.beaver.SymbolWrapper<yajco.model.PropertyReferencePart>";
%typeof ListType = "yajco.parser.beaver.SymbolWrapper<yajco.model.type.ListType>";
%typeof ComponentType = "yajco.parser.beaver.SymbolWrapper<yajco.model.type.ComponentType>";
%typeof NotationPartPattern = "yajco.parser.beaver.SymbolWrapper<yajco.model.pattern.NotationPartPattern>";
%typeof TokenDef = "yajco.parser.beaver.SymbolWrapper<yajco.model.TokenDef>";
%typeof NotationPattern = "yajco.parser.beaver.SymbolWrapper<yajco.model.pattern.NotationPattern>";
%typeof TokenDefArray1 = "yajco.parser.beaver.SymbolWrapper<yajco.parser.beaver.SymbolListImpl<yajco.model.TokenDef>>";
%typeof ArrayType = "yajco.parser.beaver.SymbolWrapper<yajco.model.type.ArrayType>";
%typeof Associativity = "yajco.parser.beaver.SymbolWrapper<yajco.model.pattern.impl.Associativity>";
%typeof SkipDef = "yajco.parser.beaver.SymbolWrapper<yajco.model.SkipDef>";
%typeof PropertyArray5 = "yajco.parser.beaver.SymbolWrapper<yajco.parser.beaver.SymbolListImpl<yajco.model.Property>>";
%typeof Notation = "yajco.parser.beaver.SymbolWrapper<yajco.model.Notation>";
%typeof LocalVariablePart = "yajco.parser.beaver.SymbolWrapper<yajco.model.LocalVariablePart>";
%typeof Indent = "yajco.parser.beaver.SymbolWrapper<yajco.model.pattern.impl.printer.Indent>";
%typeof NewLine = "yajco.parser.beaver.SymbolWrapper<yajco.model.pattern.impl.printer.NewLine>";
%typeof PrimitiveTypeConst = "yajco.parser.beaver.SymbolWrapper<yajco.model.type.PrimitiveTypeConst>";
%typeof Type = "yajco.parser.beaver.SymbolWrapper<yajco.model.type.Type>";
%typeof Language = "yajco.parser.beaver.SymbolWrapper<yajco.model.Language>";
%typeof LanguageSetting = "yajco.parser.beaver.SymbolWrapper<yajco.model.LanguageSetting>";
%typeof TokenPart = "yajco.parser.beaver.SymbolWrapper<yajco.model.TokenPart>";
%typeof SkipDefArray2 = "yajco.parser.beaver.SymbolWrapper<yajco.parser.beaver.SymbolListImpl<yajco.model.SkipDef>>";
%typeof PropertyPattern = "yajco.parser.beaver.SymbolWrapper<yajco.model.pattern.PropertyPattern>";
%typeof Range = "yajco.parser.beaver.SymbolWrapper<yajco.model.pattern.impl.Range>";
%typeof PropertyPatternArray8 = "yajco.parser.beaver.SymbolWrapper<yajco.parser.beaver.SymbolListImpl<yajco.model.pattern.PropertyPattern>>";

%goal Language;

Type
	= ReferenceType.val	{: return (Symbol) new SymbolWrapper(val.getWrappedObject()); :}
	| PrimitiveType.val	{: return (Symbol) new SymbolWrapper(val.getWrappedObject()); :}
	| ComponentType.val	{: return (Symbol) new SymbolWrapper(val.getWrappedObject()); :}
	;

PrimitiveType
	= PrimitiveTypeConst.primitiveTypeConst	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.type.PrimitiveType(primitiveTypeConst.getWrappedObject()), (Object)primitiveTypeConst.getWrappedObject())); :}
	;

ComponentType
	= SetType.val	{: return (Symbol) new SymbolWrapper(val.getWrappedObject()); :}
	| ListType.val	{: return (Symbol) new SymbolWrapper(val.getWrappedObject()); :}
	| ArrayType.val	{: return (Symbol) new SymbolWrapper(val.getWrappedObject()); :}
	;

Language
	= SYMBOLTOKENS TokenDefArray1.tokens SYMBOLSKIPS SkipDefArray2.skips ConceptArray3.concepts SYMBOLSETTINGS LanguageSettingArray4.settings	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.Language(new java.util.ArrayList<yajco.model.TokenDef>(tokens.getWrappedObject()), new java.util.ArrayList<yajco.model.SkipDef>(skips.getWrappedObject()), new java.util.ArrayList<yajco.model.Concept>(concepts.getWrappedObject()), new java.util.HashSet<yajco.model.LanguageSetting>(settings.getWrappedObject())), (Object)new java.util.ArrayList<yajco.model.TokenDef>(tokens.getWrappedObject()), new java.util.ArrayList<yajco.model.SkipDef>(skips.getWrappedObject()), new java.util.ArrayList<yajco.model.Concept>(concepts.getWrappedObject()), new java.util.HashSet<yajco.model.LanguageSetting>(settings.getWrappedObject()))); :}
	| SYMBOLTOKENS TokenDefArray1.tokens SYMBOLSKIPS SkipDefArray2.skips ConceptArray3.concepts	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.Language(new java.util.ArrayList<yajco.model.TokenDef>(tokens.getWrappedObject()), new java.util.ArrayList<yajco.model.SkipDef>(skips.getWrappedObject()), new java.util.ArrayList<yajco.model.Concept>(concepts.getWrappedObject())), (Object)new java.util.ArrayList<yajco.model.TokenDef>(tokens.getWrappedObject()), new java.util.ArrayList<yajco.model.SkipDef>(skips.getWrappedObject()), new java.util.ArrayList<yajco.model.Concept>(concepts.getWrappedObject()))); :}
	| SYMBOLLANGUAGE NAME.name SYMBOLTOKENS TokenDefArray1.tokens SYMBOLSKIPS SkipDefArray2.skips ConceptArray3.concepts SYMBOLSETTINGS LanguageSettingArray4.settings	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.Language(name, new java.util.ArrayList<yajco.model.TokenDef>(tokens.getWrappedObject()), new java.util.ArrayList<yajco.model.SkipDef>(skips.getWrappedObject()), new java.util.ArrayList<yajco.model.Concept>(concepts.getWrappedObject()), new java.util.HashSet<yajco.model.LanguageSetting>(settings.getWrappedObject())), (Object)name, new java.util.ArrayList<yajco.model.TokenDef>(tokens.getWrappedObject()), new java.util.ArrayList<yajco.model.SkipDef>(skips.getWrappedObject()), new java.util.ArrayList<yajco.model.Concept>(concepts.getWrappedObject()), new java.util.HashSet<yajco.model.LanguageSetting>(settings.getWrappedObject()))); :}
	| SYMBOLLANGUAGE NAME.name SYMBOLTOKENS TokenDefArray1.tokens SYMBOLSKIPS SkipDefArray2.skips ConceptArray3.concepts	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.Language(name, new java.util.ArrayList<yajco.model.TokenDef>(tokens.getWrappedObject()), new java.util.ArrayList<yajco.model.SkipDef>(skips.getWrappedObject()), new java.util.ArrayList<yajco.model.Concept>(concepts.getWrappedObject())), (Object)name, new java.util.ArrayList<yajco.model.TokenDef>(tokens.getWrappedObject()), new java.util.ArrayList<yajco.model.SkipDef>(skips.getWrappedObject()), new java.util.ArrayList<yajco.model.Concept>(concepts.getWrappedObject()))); :}
	;

Property
	= NAME.name SYMBOL_58 Type.type SYMBOL_123 PropertyPatternArray8.patterns SYMBOL_125	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.Property(name, type.getWrappedObject(), patterns.getWrappedObject().toArray(new yajco.model.pattern.PropertyPattern[]{})), (Object)name, type.getWrappedObject(), patterns.getWrappedObject().toArray(new yajco.model.pattern.PropertyPattern[]{}))); :}
	| NAME.name SYMBOL_58 Type.type	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.Property(name, type.getWrappedObject()), (Object)name, type.getWrappedObject())); :}
	;

SkipDef
	= STRING_VALUE.regexp	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.SkipDef(regexp), (Object)regexp)); :}
	;

ReferenceType
	= NAME.name	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.type.ReferenceType(name), (Object)name)); :}
	;

ConceptPattern
	= Enum.val	{: return (Symbol) new SymbolWrapper(val.getWrappedObject()); :}
	| Parentheses.val	{: return (Symbol) new SymbolWrapper(val.getWrappedObject()); :}
	| Operator.val	{: return (Symbol) new SymbolWrapper(val.getWrappedObject()); :}
	;

PropertyArray5
	= PropertyArray5.list SYMBOL_44 Property.elem	{: list.getWrappedObject().add(elem.getWrappedObject()); return (Symbol) new SymbolWrapper(list.getWrappedObject()); :}
	| Property.elem	{: java.util.List<yajco.model.Property> list = null; list = new SymbolListImpl<yajco.model.Property>(); list.add(elem.getWrappedObject()); return (Symbol) new SymbolWrapper(list); :}
	;

NotationArray7
	= NotationArray7.list SYMBOL_124 Notation.elem	{: list.getWrappedObject().add(elem.getWrappedObject()); return (Symbol) new SymbolWrapper(list.getWrappedObject()); :}
	| Notation.elem	{: java.util.List<yajco.model.Notation> list = null; list = new SymbolListImpl<yajco.model.Notation>(); list.add(elem.getWrappedObject()); return (Symbol) new SymbolWrapper(list); :}
	;

NotationPartPatternArray11
	= NotationPartPatternArray11.list NotationPartPattern.elem	{: list.getWrappedObject().add(elem.getWrappedObject()); return (Symbol) new SymbolWrapper(list.getWrappedObject()); :}
	| 	{: return (Symbol) new SymbolWrapper(new SymbolListImpl<yajco.model.pattern.NotationPartPattern>()); :}
	;

SetType
	= SYMBOLSET SYMBOLOF Type.componentType	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.type.SetType(componentType.getWrappedObject()), (Object)componentType.getWrappedObject())); :}
	;

NotationPartArray9
	= NotationPartArray9.list NotationPart.elem	{: list.getWrappedObject().add(elem.getWrappedObject()); return (Symbol) new SymbolWrapper(list.getWrappedObject()); :}
	| NotationPart.elem	{: java.util.List<yajco.model.NotationPart> list = null; list = new SymbolListImpl<yajco.model.NotationPart>(); list.add(elem.getWrappedObject()); return (Symbol) new SymbolWrapper(list); :}
	;

NewLine
	= SYMBOLNEWLINE	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.pattern.impl.printer.NewLine())); :}
	;

ListType
	= SYMBOLLIST SYMBOLOF Type.componentType	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.type.ListType(componentType.getWrappedObject()), (Object)componentType.getWrappedObject())); :}
	;

NotationPartPattern
	= References.val	{: return (Symbol) new SymbolWrapper(val.getWrappedObject()); :}
	| NewLine.val	{: return (Symbol) new SymbolWrapper(val.getWrappedObject()); :}
	| Indent.val	{: return (Symbol) new SymbolWrapper(val.getWrappedObject()); :}
	| Token.val	{: return (Symbol) new SymbolWrapper(val.getWrappedObject()); :}
	| Separator.val	{: return (Symbol) new SymbolWrapper(val.getWrappedObject()); :}
	| Range.val	{: return (Symbol) new SymbolWrapper(val.getWrappedObject()); :}
	;

NotationPattern
	= Factory.val	{: return (Symbol) new SymbolWrapper(val.getWrappedObject()); :}
	;

Operator
	= SYMBOLOPERATOR SYMBOL_40 SYMBOLPRIORITY SYMBOL_61 INT_VALUE.intValue SYMBOL_41	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.pattern.impl.Operator(java.lang.Integer.valueOf(intValue)), (Object)java.lang.Integer.valueOf(intValue))); :}
	| SYMBOLOPERATOR SYMBOL_40 SYMBOLPRIORITY SYMBOL_61 INT_VALUE.intValue SYMBOL_44 SYMBOLASSOCIATIVITY SYMBOL_61 Associativity.associativity SYMBOL_41	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.pattern.impl.Operator(java.lang.Integer.valueOf(intValue), associativity.getWrappedObject()), (Object)java.lang.Integer.valueOf(intValue), associativity.getWrappedObject())); :}
	;

LocalVariablePart
	= NAME.name SYMBOL_58 Type.type	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.LocalVariablePart(name, type.getWrappedObject()), (Object)name, type.getWrappedObject())); :}
	| NAME.name SYMBOL_58 Type.type SYMBOL_123 NotationPartPatternArray11.patterns SYMBOL_125	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.LocalVariablePart(name, type.getWrappedObject(), patterns.getWrappedObject().toArray(new yajco.model.pattern.NotationPartPattern[]{})), (Object)name, type.getWrappedObject(), patterns.getWrappedObject().toArray(new yajco.model.pattern.NotationPartPattern[]{}))); :}
	;

ConceptPatternArray6
	= ConceptPatternArray6.list ConceptPattern.elem	{: list.getWrappedObject().add(elem.getWrappedObject()); return (Symbol) new SymbolWrapper(list.getWrappedObject()); :}
	| 	{: return (Symbol) new SymbolWrapper(new SymbolListImpl<yajco.model.pattern.ConceptPattern>()); :}
	;

Enum
	= SYMBOLENUM	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.pattern.impl.Enum())); :}
	;

Parentheses
	= SYMBOLPARENTHESES	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.pattern.impl.Parentheses())); :}
	| SYMBOLPARENTHESES SYMBOL_40 STRING_VALUE.left SYMBOL_44 STRING_VALUE.right SYMBOL_41	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.pattern.impl.Parentheses(left, right), (Object)left, right)); :}
	;

SkipDefArray2
	= SkipDefArray2.list SkipDef.elem	{: list.getWrappedObject().add(elem.getWrappedObject()); return (Symbol) new SymbolWrapper(list.getWrappedObject()); :}
	| 	{: return (Symbol) new SymbolWrapper(new SymbolListImpl<yajco.model.SkipDef>()); :}
	;

Indent
	= SYMBOLINDENT	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.pattern.impl.printer.Indent())); :}
	| SYMBOLINDENT SYMBOL_40 INT_VALUE.level SYMBOL_41	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.pattern.impl.printer.Indent(java.lang.Integer.valueOf(level)), (Object)java.lang.Integer.valueOf(level))); :}
	;

TokenDef
	= NAME.name SYMBOL_61 STRING_VALUE.regexp	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.TokenDef(name, regexp), (Object)name, regexp)); :}
	;

Range
	= SYMBOLRANGE SYMBOL_40 INT_VALUE.minOccurs SYMBOL_46__46 INT_VALUE.maxOccurs SYMBOL_41	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.pattern.impl.Range(java.lang.Integer.valueOf(minOccurs), java.lang.Integer.valueOf(maxOccurs)), (Object)java.lang.Integer.valueOf(minOccurs), java.lang.Integer.valueOf(maxOccurs))); :}
	| SYMBOLRANGE SYMBOL_40 INT_VALUE.minOccurs SYMBOL_46__46 SYMBOL_42 SYMBOL_41	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.pattern.impl.Range(java.lang.Integer.valueOf(minOccurs)), (Object)java.lang.Integer.valueOf(minOccurs))); :}
	;

TokenDefArray1
	= TokenDefArray1.list TokenDef.elem	{: list.getWrappedObject().add(elem.getWrappedObject()); return (Symbol) new SymbolWrapper(list.getWrappedObject()); :}
	| 	{: return (Symbol) new SymbolWrapper(new SymbolListImpl<yajco.model.TokenDef>()); :}
	;

References
	= SYMBOLREFERENCES SYMBOL_40 NAME.name SYMBOL_41	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.pattern.impl.References(name), (Object)name)); :}
	| SYMBOLREFERENCES SYMBOL_40 NAME.name SYMBOL_44 SYMBOLPROPERTY SYMBOL_61 NAME.property SYMBOL_41	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.pattern.impl.References(name, property), (Object)name, property)); :}
	;

TokenPart
	= STRING_VALUE.stringValue	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.TokenPart(stringValue), (Object)stringValue)); :}
	;

PropertyPattern
	= Identifier.val	{: return (Symbol) new SymbolWrapper(val.getWrappedObject()); :}
	;

PropertyPatternArray8
	= PropertyPatternArray8.list PropertyPattern.elem	{: list.getWrappedObject().add(elem.getWrappedObject()); return (Symbol) new SymbolWrapper(list.getWrappedObject()); :}
	| 	{: return (Symbol) new SymbolWrapper(new SymbolListImpl<yajco.model.pattern.PropertyPattern>()); :}
	;

PrimitiveTypeConst
	= BOOLEAN	{: return (Symbol) new SymbolWrapper(yajco.model.type.PrimitiveTypeConst.BOOLEAN); :}
	| INTEGER	{: return (Symbol) new SymbolWrapper(yajco.model.type.PrimitiveTypeConst.INTEGER); :}
	| REAL	{: return (Symbol) new SymbolWrapper(yajco.model.type.PrimitiveTypeConst.REAL); :}
	| STRING	{: return (Symbol) new SymbolWrapper(yajco.model.type.PrimitiveTypeConst.STRING); :}
	;

LanguageSettingArray4
	= LanguageSettingArray4.list LanguageSetting.elem	{: list.getWrappedObject().add(elem.getWrappedObject()); return (Symbol) new SymbolWrapper(list.getWrappedObject()); :}
	| 	{: return (Symbol) new SymbolWrapper(new SymbolListImpl<yajco.model.LanguageSetting>()); :}
	;

Separator
	= SYMBOLSEPARATOR SYMBOL_40 STRING_VALUE.stringValue SYMBOL_41	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.pattern.impl.Separator(stringValue), (Object)stringValue)); :}
	;

Notation
	= NotationPartArray9.parts SYMBOL_123 NotationPatternArray10.patterns SYMBOL_125	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.Notation(parts.getWrappedObject().toArray(new yajco.model.NotationPart[]{}), patterns.getWrappedObject().toArray(new yajco.model.pattern.NotationPattern[]{})), (Object)parts.getWrappedObject().toArray(new yajco.model.NotationPart[]{}), patterns.getWrappedObject().toArray(new yajco.model.pattern.NotationPattern[]{}))); :}
	| NotationPartArray9.parts	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.Notation(parts.getWrappedObject().toArray(new yajco.model.NotationPart[]{})), (Object)parts.getWrappedObject().toArray(new yajco.model.NotationPart[]{}))); :}
	;

Associativity
	= SYMBOLLEFT	{: return (Symbol) new SymbolWrapper(yajco.model.pattern.impl.Associativity.LEFT); :}
	| SYMBOLRIGHT	{: return (Symbol) new SymbolWrapper(yajco.model.pattern.impl.Associativity.RIGHT); :}
	| SYMBOLNONE	{: return (Symbol) new SymbolWrapper(yajco.model.pattern.impl.Associativity.NONE); :}
	| SYMBOLAUTO	{: return (Symbol) new SymbolWrapper(yajco.model.pattern.impl.Associativity.AUTO); :}
	;

Identifier
	= SYMBOLIDENTIFIER	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.pattern.impl.Identifier())); :}
	;

Concept
	= SYMBOLCONCEPT NAME.name SYMBOLAS SYMBOL_58 PropertyArray5.abstractSyntax	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.Concept(name, abstractSyntax.getWrappedObject().toArray(new yajco.model.Property[]{})), (Object)name, abstractSyntax.getWrappedObject().toArray(new yajco.model.Property[]{}))); :}
	| SYMBOLCONCEPT NAME.name	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.Concept(name), (Object)name)); :}
	| SYMBOLCONCEPT NAME.name SYMBOL_58 NAME.parent	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.Concept(name, parent), (Object)name, parent)); :}
	| SYMBOLCONCEPT NAME.name SYMBOL_58 NAME.parent SYMBOL_123 ConceptPatternArray6.patterns SYMBOL_125 SYMBOLCS SYMBOL_58 NotationArray7.concreteSyntax	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.Concept(name, parent, patterns.getWrappedObject().toArray(new yajco.model.pattern.ConceptPattern[]{}), concreteSyntax.getWrappedObject().toArray(new yajco.model.Notation[]{})), (Object)name, parent, patterns.getWrappedObject().toArray(new yajco.model.pattern.ConceptPattern[]{}), concreteSyntax.getWrappedObject().toArray(new yajco.model.Notation[]{}))); :}
	| SYMBOLCONCEPT NAME.name SYMBOL_123 ConceptPatternArray6.patterns SYMBOL_125 SYMBOLAS SYMBOL_58 PropertyArray5.abstractSyntax SYMBOLCS SYMBOL_58 NotationArray7.concreteSyntax	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.Concept(name, patterns.getWrappedObject().toArray(new yajco.model.pattern.ConceptPattern[]{}), abstractSyntax.getWrappedObject().toArray(new yajco.model.Property[]{}), concreteSyntax.getWrappedObject().toArray(new yajco.model.Notation[]{})), (Object)name, patterns.getWrappedObject().toArray(new yajco.model.pattern.ConceptPattern[]{}), abstractSyntax.getWrappedObject().toArray(new yajco.model.Property[]{}), concreteSyntax.getWrappedObject().toArray(new yajco.model.Notation[]{}))); :}
	| SYMBOLCONCEPT NAME.name SYMBOLCS SYMBOL_58 NotationArray7.concreteSyntax	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.Concept(name, concreteSyntax.getWrappedObject().toArray(new yajco.model.Notation[]{})), (Object)name, concreteSyntax.getWrappedObject().toArray(new yajco.model.Notation[]{}))); :}
	| SYMBOLCONCEPT NAME.name SYMBOL_58 NAME.parent SYMBOL_123 ConceptPatternArray6.patterns SYMBOL_125 SYMBOLAS SYMBOL_58 PropertyArray5.abstractSyntax SYMBOLCS SYMBOL_58 NotationArray7.concreteSyntax	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.Concept(name, parent, patterns.getWrappedObject().toArray(new yajco.model.pattern.ConceptPattern[]{}), abstractSyntax.getWrappedObject().toArray(new yajco.model.Property[]{}), concreteSyntax.getWrappedObject().toArray(new yajco.model.Notation[]{})), (Object)name, parent, patterns.getWrappedObject().toArray(new yajco.model.pattern.ConceptPattern[]{}), abstractSyntax.getWrappedObject().toArray(new yajco.model.Property[]{}), concreteSyntax.getWrappedObject().toArray(new yajco.model.Notation[]{}))); :}
	| SYMBOLCONCEPT NAME.name SYMBOL_123 ConceptPatternArray6.patterns SYMBOL_125 SYMBOLAS SYMBOL_58 PropertyArray5.abstractSyntax	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.Concept(name, patterns.getWrappedObject().toArray(new yajco.model.pattern.ConceptPattern[]{}), abstractSyntax.getWrappedObject().toArray(new yajco.model.Property[]{})), (Object)name, patterns.getWrappedObject().toArray(new yajco.model.pattern.ConceptPattern[]{}), abstractSyntax.getWrappedObject().toArray(new yajco.model.Property[]{}))); :}
	| SYMBOLCONCEPT NAME.name SYMBOL_58 NAME.parent SYMBOLCS SYMBOL_58 NotationArray7.concreteSyntax	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.Concept(name, parent, concreteSyntax.getWrappedObject().toArray(new yajco.model.Notation[]{})), (Object)name, parent, concreteSyntax.getWrappedObject().toArray(new yajco.model.Notation[]{}))); :}
	| SYMBOLCONCEPT NAME.name SYMBOL_58 NAME.parent SYMBOL_123 ConceptPatternArray6.patterns SYMBOL_125 SYMBOLAS SYMBOL_58 PropertyArray5.abstractSyntax	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.Concept(name, parent, patterns.getWrappedObject().toArray(new yajco.model.pattern.ConceptPattern[]{}), abstractSyntax.getWrappedObject().toArray(new yajco.model.Property[]{})), (Object)name, parent, patterns.getWrappedObject().toArray(new yajco.model.pattern.ConceptPattern[]{}), abstractSyntax.getWrappedObject().toArray(new yajco.model.Property[]{}))); :}
	| SYMBOLCONCEPT NAME.name SYMBOL_58 NAME.parent SYMBOL_123 ConceptPatternArray6.patterns SYMBOL_125	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.Concept(name, parent, patterns.getWrappedObject().toArray(new yajco.model.pattern.ConceptPattern[]{})), (Object)name, parent, patterns.getWrappedObject().toArray(new yajco.model.pattern.ConceptPattern[]{}))); :}
	| SYMBOLCONCEPT NAME.name SYMBOL_123 ConceptPatternArray6.patterns SYMBOL_125 SYMBOLCS SYMBOL_58 NotationArray7.concreteSyntax	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.Concept(name, patterns.getWrappedObject().toArray(new yajco.model.pattern.ConceptPattern[]{}), concreteSyntax.getWrappedObject().toArray(new yajco.model.Notation[]{})), (Object)name, patterns.getWrappedObject().toArray(new yajco.model.pattern.ConceptPattern[]{}), concreteSyntax.getWrappedObject().toArray(new yajco.model.Notation[]{}))); :}
	| SYMBOLCONCEPT NAME.name SYMBOL_123 ConceptPatternArray6.patterns SYMBOL_125	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.Concept(name, patterns.getWrappedObject().toArray(new yajco.model.pattern.ConceptPattern[]{})), (Object)name, patterns.getWrappedObject().toArray(new yajco.model.pattern.ConceptPattern[]{}))); :}
	| SYMBOLCONCEPT NAME.name SYMBOLAS SYMBOL_58 PropertyArray5.abstractSyntax SYMBOLCS SYMBOL_58 NotationArray7.concreteSyntax	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.Concept(name, abstractSyntax.getWrappedObject().toArray(new yajco.model.Property[]{}), concreteSyntax.getWrappedObject().toArray(new yajco.model.Notation[]{})), (Object)name, abstractSyntax.getWrappedObject().toArray(new yajco.model.Property[]{}), concreteSyntax.getWrappedObject().toArray(new yajco.model.Notation[]{}))); :}
	| SYMBOLCONCEPT NAME.name SYMBOL_58 NAME.parent SYMBOLAS SYMBOL_58 PropertyArray5.abstractSyntax	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.Concept(name, parent, abstractSyntax.getWrappedObject().toArray(new yajco.model.Property[]{})), (Object)name, parent, abstractSyntax.getWrappedObject().toArray(new yajco.model.Property[]{}))); :}
	| SYMBOLCONCEPT NAME.name SYMBOL_58 NAME.parent SYMBOLAS SYMBOL_58 PropertyArray5.abstractSyntax SYMBOLCS SYMBOL_58 NotationArray7.concreteSyntax	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.Concept(name, parent, abstractSyntax.getWrappedObject().toArray(new yajco.model.Property[]{}), concreteSyntax.getWrappedObject().toArray(new yajco.model.Notation[]{})), (Object)name, parent, abstractSyntax.getWrappedObject().toArray(new yajco.model.Property[]{}), concreteSyntax.getWrappedObject().toArray(new yajco.model.Notation[]{}))); :}
	;

Token
	= SYMBOLTOKEN SYMBOL_40 STRING_VALUE.name SYMBOL_41	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.pattern.impl.Token(name), (Object)name)); :}
	;

BindingNotationPart
	= PropertyReferencePart.val	{: return (Symbol) new SymbolWrapper(val.getWrappedObject()); :}
	| LocalVariablePart.val	{: return (Symbol) new SymbolWrapper(val.getWrappedObject()); :}
	;

PropertyReferencePart
	= NAME.name	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.PropertyReferencePart(name), (Object)name)); :}
	| NAME.name SYMBOL_123 NotationPartPatternArray11.patterns SYMBOL_125	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.PropertyReferencePart(name, patterns.getWrappedObject().toArray(new yajco.model.pattern.NotationPartPattern[]{})), (Object)name, patterns.getWrappedObject().toArray(new yajco.model.pattern.NotationPartPattern[]{}))); :}
	;

Factory
	= SYMBOLFACTORY SYMBOL_40 SYMBOLMETHOD SYMBOL_61 NAME.name SYMBOL_41	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.pattern.impl.Factory(name), (Object)name)); :}
	;

LanguageSetting
	= NAME.name SYMBOL_61 STRING_VALUE.value	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.LanguageSetting(name, value), (Object)name, value)); :}
	;

NotationPatternArray10
	= NotationPatternArray10.list NotationPattern.elem	{: list.getWrappedObject().add(elem.getWrappedObject()); return (Symbol) new SymbolWrapper(list.getWrappedObject()); :}
	| 	{: return (Symbol) new SymbolWrapper(new SymbolListImpl<yajco.model.pattern.NotationPattern>()); :}
	;

NotationPart
	= TokenPart.val	{: return (Symbol) new SymbolWrapper(val.getWrappedObject()); :}
	| BindingNotationPart.val	{: return (Symbol) new SymbolWrapper(val.getWrappedObject()); :}
	;

ConceptArray3
	= ConceptArray3.list Concept.elem	{: list.getWrappedObject().add(elem.getWrappedObject()); return (Symbol) new SymbolWrapper(list.getWrappedObject()); :}
	| Concept.elem	{: java.util.List<yajco.model.Concept> list = null; list = new SymbolListImpl<yajco.model.Concept>(); list.add(elem.getWrappedObject()); return (Symbol) new SymbolWrapper(list); :}
	;

ArrayType
	= SYMBOLARRAY SYMBOLOF Type.componentType	{: return (Symbol) new SymbolWrapper(yajco.ReferenceResolver.getInstance().register(new yajco.model.type.ArrayType(componentType.getWrappedObject()), (Object)componentType.getWrappedObject())); :}
	;

