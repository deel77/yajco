## Input - parserClassName
## Input - parserPackageName
## Input - packageClassPackageName
## Input - mainElementClassName
## Input - scannerClassName
## Input - referenceResolverClassName
## Input - translatorClassName
package $parserClassPackageName;

public class $parserClassName {
	private static ${parserPackageName}.$parserClassName parser;

	public $mainElementClassName parse(String input) throws LisaParseException {
		java.io.ByteArrayInputStream is = new java.io.ByteArrayInputStream(input.getBytes());
		try {
                    ${parserPackageName}.$scannerClassName scanner = new ${parserPackageName}.${scannerClassName}(is, "inputFileName.input");
                    if (parser == null) {
                            parser = new ${parserPackageName}.${parserClassName}();
                    }
                    ${referenceResolverClassName} referenceResolver = ${referenceResolverClassName}.createInstance();
                    Lisa.Parser.CSyntaxTree tree = parser.parse(scanner);
                    if (tree != null) {
                        $mainElementClassName root = new ${parserPackageName}.${translatorClassName}().evaluate(tree.getRoot());
                        referenceResolver.resolveReferences();
                        return root;
                    }
		} catch (java.lang.Exception e) {
			throw new LisaParseException("Problem parsing source code ", e);
		}
                return null;
	}

	public $mainElementClassName parse(java.io.Reader reader) throws LisaParseException {
		try {
			return parse(readAsString(reader));
		} catch(java.io.IOException e) {
			throw new LisaParseException("Problem reading input file", e);
		}
	}

	private String readAsString(java.io.Reader r) throws java.io.IOException {
		StringBuilder sb = new StringBuilder();
		java.io.BufferedReader br = new java.io.BufferedReader(r);
		String line;
		while ((line = br.readLine()) != null) {
			sb.append(line + "\n");
		}
		return sb.toString();
	}
}